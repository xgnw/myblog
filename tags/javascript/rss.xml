<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on 爸比娃娃的博客</title><link>https://blog.jiandan.cf/tags/javascript/</link><description>Recent content in JavaScript on 爸比娃娃的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 24 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jiandan.cf/tags/javascript/rss.xml" rel="self" type="application/rss+xml"/><item><title>去除typescript代码类型</title><link>https://blog.jiandan.cf/post/develop/remove-ts-code-type/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/develop/remove-ts-code-type/</guid><description>在短时间内有一个需求，原项目代码是 js，而我手里头的功能代码是 ts 的，需要将其合并。 按照以往，我通常会将 js 改写成 ts，但时间方面有限，就采取j</description></item><item><title>JavaScript中的二进制数据</title><link>https://blog.jiandan.cf/post/develop/js-binary-data/</link><pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/develop/js-binary-data/</guid><description>在我编写 js 代码中，关于处理二进制数据了解甚少，好像都是用数组表示，但是成员又很模糊。尤其是在遇到一些 http 的 post 请求或 websocket，发送二进</description></item><item><title>JS函数hook</title><link>https://blog.jiandan.cf/post/develop/js-function-hook/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/develop/js-function-hook/</guid><description>前言 我在阅读《JavaScript 设计模式与开发实践》的第 15 章 装饰者模式，突然发现 JS 逆向中 hook 函数和 js 中的装饰者模式有点像，仔细阅读完全篇后更</description></item><item><title>RPC远程调用浏览器函数</title><link>https://blog.jiandan.cf/post/develop/remote-call-browser-function/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/develop/remote-call-browser-function/</guid><description>早闻 RPC（Remote Procedure Call）远程过程调用，这一词了，应该是在安卓逆向的时候听闻的，当时吹嘘的意思是这样的，通过另一个远端服务器来调用</description></item><item><title>使用JSONPath解析json数据</title><link>https://blog.jiandan.cf/post/develop/use-jsonpath-to-parse-json-data/</link><pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/develop/use-jsonpath-to-parse-json-data/</guid><description>之前学习爬虫的时候，如果是 HTML 的数据，通过 xpath 或是 css 选择器，就能很快的获取我们想要的数据，如果是 json 有没有类似 xpath 这种，能够直接根据条件定位数据，而</description></item><item><title>JavaScript 游戏开发 - 物理碰撞引擎实现</title><link>https://blog.jiandan.cf/post/javascript-collision-physics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/javascript-collision-physics/</guid><description>年前我看到合成大西瓜小游戏火了，想到之前从来没有研究过游戏方面的开发，这次就想趁着这个机会看看 JavaScript 游戏开发，从原生角度上如何实现游戏里的物理特</description></item><item><title>js中this指向问题及call，apply，bind的区别</title><link>https://blog.jiandan.cf/post/js%E4%B8%ADthis%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98%E5%8F%8Acallapplybind%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/js%E4%B8%ADthis%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98%E5%8F%8Acallapplybind%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>js中this指向问题及call，apply，bind的区别 1 this指向 1.1 what is &amp;rsquo;this'? 在 ECMAScript 5 中，函数内部存在两个特殊的对象:arguments（</description></item><item><title>Web性能优化：使用图片懒加载推迟屏幕外图片的加载</title><link>https://blog.jiandan.cf/post/web-performance-optimization-image-lazy-loading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/web-performance-optimization-image-lazy-loading/</guid><description>在使用 chrome 的 lighthouse 对网站进行测速之后，发现有一条优化提示：推迟屏幕外的图片加载。之前有看到过要实现这样的效果需要使用 lazy loading，图片懒加载，</description></item><item><title>鸿蒙 OS：使用 JavaScript 开发 Todo App UI 界面</title><link>https://blog.jiandan.cf/post/harmonyos-js-todo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/harmonyos-js-todo/</guid><description>import useBaseUrl from &amp;lsquo;@docusaurus/useBaseUrl&amp;rsquo;; 距离鸿蒙 OS 2.0 发布已经过去一些日子了，看到鸿蒙系统强大的设备共享能力，我觉得未来它一定能够成为主流的操作系统。在利用了分布式系统的优势</description></item><item><title>浅谈与使用js中的原型</title><link>https://blog.jiandan.cf/post/%E6%B5%85%E8%B0%88%E4%B8%8E%E4%BD%BF%E7%94%A8js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/%E6%B5%85%E8%B0%88%E4%B8%8E%E4%BD%BF%E7%94%A8js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B/</guid><description>浅谈与使用js中的原型 1 什么是原型 “ 每个函数都会创建一个 prototype 属性，这个属性是一个对象，包含应该由特定引用类型的实例 共享的属性和方法。实际上，这</description></item><item><title>整理了5个JavaScript怪异行为及其原因</title><link>https://blog.jiandan.cf/post/5-javascript-tricky-problems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.jiandan.cf/post/5-javascript-tricky-problems/</guid><description>如果你用 JavaScript 写过项目或者参加过面试，那一定遇到过不少令人匪夷所思的问题。JavaScript 早期的规范不统一，也没有严格的标准，再加上它的语法</description></item></channel></rss>